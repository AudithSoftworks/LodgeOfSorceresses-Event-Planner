version: '3.7'

services:
  nginx:
    container_name: nginx
    image: nginx
    volumes:
      - ./storage/build/configs/nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - .:/var/www
    working_dir: /var/www
    depends_on:
      - php
    networks:
      default:
        aliases:
          - planner.lodgeofsorceresses.test
        ipv4_address: 172.72.0.110
#    healthcheck:
#      test: ["CMD", "service", "nginx", "status"]
#      interval: 1s
#      timeout: 1s
#      retries: 10
#      start_period: 10s
  php:
    container_name: php
    image: audithsoftworks/docker:php
    working_dir: /var/www
    volumes:
      - .:/var/www
      - ./storage/build/configs/crontabs:/var/spool/cron/crontabs
      - $HOME/.npm:/home/audith/.npm
      - $HOME/.cache:/home/audith/.cache
    depends_on:
      - mariadb
      - postgres
      - redis
    environment:
      XDEBUG_CONFIG: "remote_host=172.72.0.1"
      REDIS_PORT: 6379
      WORKDIR: "/var/www"
      MYUID: "${MYUID:-1000}"
      MYGID: "${MYGID:-1000}"
      SQREEN_TOKEN: "${SQREEN_TOKEN}"
      SQREEN_APP_NAME: "${SQREEN_APP_NAME:-Lodge of Sorceresses Guild Planner}"
    entrypoint: storage/build/scripts/docker-entrypoint.sh
    command: php-fpm
    stdin_open: true
    tty: true
    ipc: host
    networks:
      default:
        ipv4_address: 172.72.0.100
  mariadb:
    container_name: mariadb
    image: mariadb:10
    environment:
      MYSQL_DATABASE: "basis"
      MYSQL_ALLOW_EMPTY_PASSWORD: "true"
    volumes:
      - db-data:/var/lib/mysql:rw
    networks:
      default:
        ipv4_address: 172.72.0.101
#    healthcheck:
#      test: ["CMD", "mysqladmin" ,"ping", "-uroot"]
#      interval: 1s
#      timeout: 1s
#      retries: 10
#      start_period: 10s
  postgres:
    container_name: postgres
    image: postgres:latest
    environment:
      POSTGRES_DB: "basis"
      POSTGRES_PASSWORD: ""
      POSTGRES_HOST_AUTH_METHOD: "trust"
    networks:
      default:
        ipv4_address: 172.72.0.120
#    healthcheck:
#      test: "psql -U postgres -d basis -c \"SELECT 1\""
#      interval: 1s
#      timeout: 1s
#      retries: 10
#      start_period: 10s
  redis:
    container_name: redis
    image: redis
    networks:
      default:
        ipv4_address: 172.72.0.130
#    healthcheck:
#      test: "redis-cli -h redis ping"
#      interval: 1s
#      timeout: 1s
#      retries: 10
#      start_period: 10s
volumes:
  db-data: {}
networks:
  default:
    ipam:
      config:
        - subnet: 172.72.0.0/24
